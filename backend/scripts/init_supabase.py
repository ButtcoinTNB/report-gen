"""
Initialize Supabase tables for the Scrittore Automatico di Perizie.

This script creates the necessary tables in Supabase:
1. reference_reports - For storing reference PDF templates
2. reports - For storing uploaded document metadata
"""

import sys
import os
import time

# Add parent directory to path to import from project
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from supabase import create_client, Client
from config import settings

def create_bucket_if_not_exists(supabase: Client, bucket_name: str):
    """Create a storage bucket if it doesn't already exist."""
    try:
        # Check if bucket exists first
        buckets = supabase.storage.list_buckets()
        bucket_exists = any(bucket.name == bucket_name for bucket in buckets)
        
        if not bucket_exists:
            print(f"Creating storage bucket: {bucket_name}")
            supabase.storage.create_bucket(
                bucket_name,
                options={
                    'public': True  # Make bucket publicly accessible
                }
            )
            print(f"Successfully created bucket: {bucket_name}")
        else:
            print(f"Bucket already exists: {bucket_name}")
            
    except Exception as e:
        print(f"Error creating bucket {bucket_name}: {str(e)}")


def create_table_if_not_exists(supabase: Client, table_name: str, definition: dict):
    """Create a table if it doesn't already exist."""
    try:
        # Check if we can query the table (which would indicate it exists)
        test_query = supabase.table(table_name).select("*").limit(1).execute()
        print(f"Table already exists: {table_name}")
        return
    except Exception:
        # Table doesn't exist, create it
        pass
    
    try:
        print(f"Creating table: {table_name}")
        
        # Create table using raw SQL
        # Note: The actual SQL would depend on your PostgreSQL access level
        # This is an example and may need to be done through Supabase dashboard
        
        print(f"Please create the '{table_name}' table in your Supabase dashboard with these columns:")
        for col_name, col_def in definition.items():
            print(f"  - {col_name}: {col_def}")
        
        print("\nAlternatively, run this SQL in the Supabase SQL editor:")
        sql = f"CREATE TABLE IF NOT EXISTS {table_name} (\n"
        sql += ",\n".join([f"  {col_name} {col_def}" for col_name, col_def in definition.items()])
        sql += "\n);"
        print(sql)
        
    except Exception as e:
        print(f"Error creating table {table_name}: {str(e)}")


def main():
    print("Initializing Supabase for the Scrittore Automatico di Perizie...")
    
    try:
        # Initialize Supabase client
        supabase = create_client(settings.SUPABASE_URL, settings.SUPABASE_KEY)
        print("Connected to Supabase successfully")
        
        # Create storage buckets
        create_bucket_if_not_exists(supabase, "reports")
        
        # Define tables
        reference_reports_def = {
            "id": "bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY",
            "name": "text NOT NULL",
            "file_path": "text NOT NULL",
            "public_url": "text",
            "metadata": "jsonb",
            "extracted_text": "text",
            "created_at": "timestamp with time zone DEFAULT now()"
        }
        
        reports_def = {
            "id": "bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY",
            "report_id": "text NOT NULL UNIQUE",
            "template_id": "integer",
            "files": "jsonb",
            "status": "text DEFAULT 'uploaded'",
            "created_at": "timestamp with time zone DEFAULT now()"
        }
        
        # Create tables if they don't exist
        create_table_if_not_exists(supabase, "reference_reports", reference_reports_def)
        create_table_if_not_exists(supabase, "reports", reports_def)
        
        print("\nDatabase initialization instructions generated.")
        print("Please follow the SQL instructions above to create the required tables.")
        
    except Exception as e:
        print(f"Error initializing Supabase: {str(e)}")


if __name__ == "__main__":
    main() 